import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '2.5.6' apply false
    id 'java-gradle-plugin'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}

gradlePlugin {
    plugins {
        simplePlugin {
            id = 'com.lsdconsulting.stub.plugin'
            implementationClass = 'com.lsdconsulting.stub.plugin.GreetingPlugin'
        }
    }
}

// Dependency Versioning
apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok:1.18.22'

    implementation "io.pebbletemplates:pebble:3.1.5"
    implementation 'org.apache.commons:commons-text:1.9'

    implementation 'org.springframework:spring-web:5.3.15'
    implementation 'org.springframework:spring-context:5.3.15'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.platform:junit-platform-commons:1.8.2'
    testImplementation 'org.mockito:mockito-core:4.3.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle("Test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled(true)
        html.enabled(true)
        html.setDestination(project.provider(() -> new File("${project.buildDir}/reports/coverage")))
    }
    dependsOn test
//    mustRunAfter(test)
//    executionData(
//            file("${project.buildDir}/jacoco/test.exec")
//            file("${project.buildDir}/jacoco/consumerContractTest.exec"),
//            file("${project.buildDir}/jacoco/contractTest.exec"),
//            file("${project.buildDir}/jacoco/componentTest.exec")
//    )
}

java {
    withSourcesJar()
    withJavadocJar()
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifactId rootProject.name
//            from components.java
//        }
//    }
//
//    repositories {
//        mavenLocal()
//    }
//}
